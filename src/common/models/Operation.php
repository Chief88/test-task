<?php

namespace common\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;
use yii\db\ActiveRecord;

/**
 * This is the model class for table "operation".
 *
 * @property integer $id
 * @property integer $sender_id
 * @property integer $recipient_id
 * @property integer $owner_id
 * @property string $amount
 * @property string $balance_sender
 * @property string $balance_recipient
 * @property integer $type
 * @property integer $created_at
 * @property integer $updated_at
 */
class Operation extends ActiveRecord
{
	const TYPE_ENROLL = 0;
	const TYPE_TRANSFER = 1;

	/**
	 * @inheritdoc
	 */
	public static function tableName()
	{
		return 'operation';
	}

	/**
	 * @inheritdoc
	 */
	public function rules()
	{
		return [
			[['recipient_id', 'amount', 'type'], 'required'],
			[['sender_id', 'recipient_id', 'owner_id', 'type', 'created_at', 'updated_at'], 'integer'],
			[['amount', 'balance_recipient', 'balance_sender'], 'number', 'min' => 0],
			['type', 'in', 'range' => array_keys(self::getTypeArray())],
			[['sender_id', 'recipient_id', 'owner', 'amount', 'balance_recipient', 'balance_sender', 'type', 'created_at', 'updated_at'], 'safe'],
		];
	}

	/**
	 * @inheritdoc
	 */
	public function attributeLabels()
	{
		return [
			'id' => Yii::t('app', 'ID'),
			'sender_id' => Yii::t('app', 'Отправитель'),
			'recipient_id' => Yii::t('app', 'Получатель'),
			'owner_id' => Yii::t('app', 'Создатель'),
			'amount' => Yii::t('app', 'Сумма'),
			'balance_sender' => Yii::t('app', 'Баланс отправителя после операции'),
			'balance_recipient' => Yii::t('app', 'Баланс получателя после операции'),
			'type' => Yii::t('app', 'Тип'),
			'created_at' => Yii::t('app', 'Создана'),
			'updated_at' => Yii::t('app', 'Обновлена'),
		];
	}

	/**
	 * @inheritdoc
	 */
	public function behaviors()
	{
		return [
			TimestampBehavior::className(),
		];
	}

	/**
	 * @param bool $insert
	 * @return bool
	 */
	public function beforeSave($insert)
	{
		$this->balance_recipient = $this->recipient->balance + $this->amount;
		if($this->type == self::TYPE_TRANSFER){
			$this->balance_sender = $this->sender->balance - $this->amount;
		}
		if(Yii::$app->id != 'app-console'){
			$this->owner_id = Yii::$app->user->id;
		}

		return parent::beforeSave($insert); // TODO: Change the autogenerated stub
	}

	public function afterSave($insert, $changedAttributes)
	{
		$this->recipient->bills->balance += $this->amount;
		$this->recipient->bills->save();

		if($this->type == self::TYPE_TRANSFER){
			$this->sender->bills->balance -= $this->amount;
			$this->sender->bills->save();
		}

		parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getSender()
	{
		return $this->hasOne(User::className(), ['id' => 'sender_id'])
			->from(User::tableName() . ' sender');
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getRecipient()
	{
		return $this->hasOne(User::className(), ['id' => 'recipient_id'])
			->from(User::tableName() . ' recipient');
	}

	/**
	 * @return \yii\db\ActiveQuery
	 */
	public function getOwner()
	{
		return $this->hasOne(User::className(), ['id' => 'owner_id'])
			->from(User::tableName() . ' owner');
	}

	/**
	 * @return mixed
	 */
	public function getTypeName()
	{
		return ArrayHelper::getValue(self::getTypeArray(), $this->type);
	}

	/**
	 * @return array
	 */
	public static function getTypeArray()
	{
		return [
			self::TYPE_ENROLL => Yii::t('app', 'Зачисление'),
			self::TYPE_TRANSFER => Yii::t('app', 'Перевод'),
		];
	}
}
